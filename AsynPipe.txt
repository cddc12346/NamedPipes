#include "pch.h"
#include <iostream>
#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include <strsafe.h>
#include <conio.h>
#include <locale>
#include <codecvt>
#include <string>

#define CONNECTING_STATE 0 
#define READING_STATE 1 
#define WRITING_STATE 2 
#define INSTANCES 1 
#define PIPE_TIMEOUT 5000
#define BUFSIZE 4096
#define bzero(b,len) (memset((b), '\0', (len)), (void) 0)
#define _SECOND 10000000

HANDLE ghEvents[4];
typedef struct
{
	OVERLAPPED oOverlap;
	HANDLE hPipeInst;
	TCHAR chRequest[BUFSIZE];
	DWORD cbRead;
	TCHAR chReply[BUFSIZE];
	DWORD cbToWrite;
	DWORD dwState;
	BOOL fPendingIO;
} PIPEINST, *LPPIPEINST;

VOID DisconnectAndReconnect(DWORD);
BOOL ConnectToNewClient(HANDLE, LPOVERLAPPED);
VOID GetAnswerToRequest(LPPIPEINST);
DWORD WINAPI ThreadProc(LPVOID); 
DWORD WINAPI NamedPipe(LPVOID);
PIPEINST Pipe[INSTANCES];
HANDLE hUserInput, hNamedPipe;
DWORD i, dwEvent, dwThreadID, dwThreadID1;
DWORD dwWait, cbRet, dwErr;
BOOL fSuccess;
int signal = 0;


HANDLE g_hChildStd_IN_Rd = NULL;
HANDLE g_hChildStd_IN_Wr = NULL;
HANDLE g_hChildStd_OUT_Rd = NULL;
HANDLE g_hChildStd_OUT_Wr = NULL;
CHAR commandBuf[BUFSIZE] = "\r\n";
HANDLE hTimer = NULL;
HANDLE myThreads[2];

LARGE_INTEGER liDueTime;

void CreateChildProcess(void);
void WriteToPipe(void);
void ReadFromPipe(void);
#define  ENV_VAR_STRING_COUNT  (sizeof(envVarStrings)/sizeof(TCHAR*))
#define INFO_BUFFER_SIZE 32767
TCHAR  cmdPath[INFO_BUFFER_SIZE];

int main(void)
{
	
	//Creating my timer
	liDueTime.QuadPart = -60 * _SECOND;
	hTimer = CreateWaitableTimer(NULL, TRUE, NULL);
	if (NULL == hTimer)
	{
		//printf("CreateWaitableTimer failed (%d)\n", GetLastError());
		return 1;
	}
	else {
		//printf("Timer set for 1 minute");
	}
	
	/*
	Creating event objects: 
	1) named pipe calls (read/write/terminate)
	2) wait for user input
	3) wait for exec command
	4) wait for 1 minute timer
	*/

	for (i = 0; i < 3; i++)
	{
		ghEvents[i] = CreateEvent(
			NULL,   // default security attributes
			FALSE,  // auto-reset event object
			FALSE,  // initial state is nonsignaled
			NULL);  // unnamed object

		if (ghEvents[i] == NULL)
		{
			printf("CreateEvent error: %d\n", GetLastError());
			ExitProcess(0);
		}
	}
	ghEvents[3] = hTimer;
			
		
	// Create named pipe thread
	hNamedPipe = CreateThread(
		NULL,         // default security attributes
		0,            // default stack size
		(LPTHREAD_START_ROUTINE)NamedPipe,
		NULL,         // no thread function arguments
		0,            // default creation flags
		&dwThreadID1); // receive thread identifier

	if (hNamedPipe == NULL)
	{
		printf("CreateThread error: %d\n", GetLastError());
		return 1;
	}

	//create userinput thread
	hUserInput = CreateThread(
		NULL,         // default security attributes
		0,            // default stack size
		(LPTHREAD_START_ROUTINE)ThreadProc,
		NULL,         // no thread function arguments
		0,            // default creation flags
		&dwThreadID); // receive thread identifier

	if (hUserInput == NULL)
	{
		printf("CreateThread error: %d\n", GetLastError());
		return 1;
	}
	myThreads[0] = hNamedPipe;
	myThreads[1] = hUserInput;

	dwWait = WaitForMultipleObjects(
		2,    // number of event objects 
		myThreads,      // array of event objects 
		FALSE,        // does not wait for all 
		INFINITE);    // waits indefinitely 

	printf("\nClosing handles for events...\n");

	for (i = 0; i < 4; i++) {
		CloseHandle(ghEvents[i]);
	}
	
	printf("\nClosing handles to child pipes...\n");
	CloseHandle(g_hChildStd_IN_Wr);
	CloseHandle(g_hChildStd_OUT_Rd);

	printf("\nClosing handle to User Input Thread...\n");
	CloseHandle(hUserInput);

	printf("Press any key to terminate");
	getchar();
}

DWORD WINAPI ThreadProc(LPVOID lpParam)
{
	printf("Hello world from Thread 2\n");
	printf("Enter any key to terminate both threads\n");
	
		if (_getch()) {
			if (!SetEvent(ghEvents[1]))
			{
				//printf("SetEvent failed (%d)\n", GetLastError());
			}
			else {
				printf("\nUser input detected, ending process\n");
			}
		}
		
	printf("User input Thread terminated\n");
	return 0;
}

DWORD WINAPI NamedPipe(LPVOID lpParam) {

	printf("Hello world from Thread Named Pipe!\n");

	//set pipe events to ghEvents[0] 
	Pipe[0].oOverlap.hEvent = ghEvents[0];
	Pipe[0].hPipeInst = CreateNamedPipe(
		TEXT("\\\\.\\pipe\\Pipe"),            // pipe name 
		PIPE_ACCESS_DUPLEX |     // read/write access 
		FILE_FLAG_OVERLAPPED,    // overlapped mode 
		PIPE_TYPE_MESSAGE |      // message-type pipe 
		PIPE_READMODE_MESSAGE |  // message-read mode 
		PIPE_WAIT,               // blocking mode 
		INSTANCES,               // number of instances 
		BUFSIZE * sizeof(TCHAR),   // output buffer size 
		BUFSIZE * sizeof(TCHAR),   // input buffer size 
		PIPE_TIMEOUT,            // client time-out 
		NULL);                   // default security attributes 
	if (Pipe[0].hPipeInst == INVALID_HANDLE_VALUE)
	{
		printf("CreateNamedPipe failed with %d.\n", GetLastError());
		return 0;
	}
	else {
		printf("CreateNamedPipe succeeded!\n");
	}

	Pipe[0].fPendingIO = ConnectToNewClient(
		Pipe[0].hPipeInst,
		&Pipe[0].oOverlap);

	Pipe[0].dwState = Pipe[0].fPendingIO ?
		CONNECTING_STATE : // still connecting 
		READING_STATE;     // ready to read 

	// Main Loop running: wait for the thread to signal one of the event objects
	while (1)
	{
		// Wait for the event object to be signaled, indicating 
		// completion of an overlapped read, write, or 
		// connect operation. 
		dwWait = WaitForMultipleObjects(
			4,    // number of event objects 
			ghEvents,      // array of event objects 
			FALSE,        // does not wait for all 
			INFINITE);    // waits indefinitely 


		i = 0;
		switch (dwWait) {
		// named pipe calls(read / write / terminate)
		case WAIT_OBJECT_0 + 0:
			if (signal == 2) {
				//reset timer whenever theres activity on shell
				SetWaitableTimer(hTimer, &liDueTime, 0, NULL, NULL, 0);
			}
			break;

		// ghEvents[1] was signaled -> wait for user input
		case WAIT_OBJECT_0 + 1:
			printf("\nClosing handle to named pipe...\n");
			CloseHandle(Pipe[0].hPipeInst);
			printf("\nClosing handle to Named_Pipe Thread...\n");
			CloseHandle(hNamedPipe);

			return 0;

		// ghEvents [2] signaled -> start cmd shell and 1 minute timer
		case WAIT_OBJECT_0 + 2:		
			CreateChildProcess();
			ReadFromPipe();
			signal = 2;

			//starting 1 minute timer
			if (!SetWaitableTimer(hTimer, &liDueTime, 0, NULL, NULL, 0))
			{
				printf("SetWaitableTimer failed (%d)\n", GetLastError());
				return 2;
			}	
			else {
				printf("\nShell started. \nInactivity of 1 minute will kill the shell\n");
			}
			break;

		// ghEvents [3] signaled -> waits for 1 minute timer signal
		case WAIT_OBJECT_0 + 3:
			printf("\nTimer is signaled\n");
			printf("Shell dies\n");
			printf("Press enter to terminate the process.\n");
			signal = 1;
			break;
		}

		if (Pipe[i].fPendingIO)
		{
			fSuccess = GetOverlappedResult(
				Pipe[i].hPipeInst, // handle to pipe 
				&Pipe[i].oOverlap, // OVERLAPPED structure 
				&cbRet,            // bytes transferred 
				FALSE);            // do not wait 

			switch (Pipe[i].dwState)
			{
				// Pending connect operation 
			case CONNECTING_STATE:
				if (!fSuccess)
				{
					//printf("Error %d.\n", GetLastError());
					return 0;
				}
				Pipe[i].dwState = READING_STATE;
				break;

				// Pending read operation 
			case READING_STATE:
				
				if (!fSuccess || cbRet == 0)
				{
					DisconnectAndReconnect(i);
					continue;
				}
				Pipe[i].cbRead = cbRet;
				Pipe[i].dwState = WRITING_STATE;
				break;

				// Pending write operation 
			case WRITING_STATE:
				
				if (!fSuccess || cbRet != Pipe[i].cbToWrite)
				{
					DisconnectAndReconnect(i);
					continue;
				}
				Pipe[i].dwState = READING_STATE;
				break;

			default:
			{
				printf("Invalid pipe state.\n");
				return 0;
			}
			}
		}

		// The pipe state determines which operation to do next. 

		switch (Pipe[i].dwState)
		{
			// READING_STATE: 
			// The pipe instance is connected to the client 
			// and is ready to read a request from the client. 

		case READING_STATE:
			fSuccess = ReadFile(
				Pipe[i].hPipeInst,
				Pipe[i].chRequest,
				BUFSIZE * sizeof(TCHAR),
				&Pipe[i].cbRead,
				&Pipe[i].oOverlap);

			// The read operation completed successfully. 

			if (fSuccess && Pipe[i].cbRead != 0)
			{
				Pipe[i].fPendingIO = FALSE;
				Pipe[i].dwState = WRITING_STATE;
				continue;
			}

			// The read operation is still pending. 

			dwErr = GetLastError();
			if (!fSuccess && (dwErr == ERROR_IO_PENDING))
			{
				Pipe[i].fPendingIO = TRUE;
				continue;
			}

			// An error occurred; disconnect from the client. 

			DisconnectAndReconnect(i);
			break;

			// WRITING_STATE: 
			// The request was successfully read from the client. 
			// Get the reply data and write it to the client. 

		case WRITING_STATE:
			GetAnswerToRequest(&Pipe[i]);
			if (signal == 2) {
				WriteToPipe();
				ReadFromPipe();
			}
			fSuccess = WriteFile(
				Pipe[i].hPipeInst,
				Pipe[i].chReply,
				Pipe[i].cbToWrite,
				&cbRet,
				&Pipe[i].oOverlap);

			// The write operation completed successfully. 

			if (fSuccess && cbRet == Pipe[i].cbToWrite)
			{
				Pipe[i].fPendingIO = FALSE;
				Pipe[i].dwState = READING_STATE;
				continue;
			}

			// The write operation is still pending. 

			dwErr = GetLastError();
			if (!fSuccess && (dwErr == ERROR_IO_PENDING))
			{
				Pipe[i].fPendingIO = TRUE;
				continue;
			}

			// An error occurred; disconnect from the client. 

			DisconnectAndReconnect(i);
			break;

		default:
		{
			printf("Invalid pipe state.\n");
			return 0;
		}
		}
	}
	// Close event handles

	return 0;
}

VOID DisconnectAndReconnect(DWORD i)
{
	// Disconnect the pipe instance. 

	if (!DisconnectNamedPipe(Pipe[i].hPipeInst))
	{
		printf("DisconnectNamedPipe failed with %d.\n", GetLastError());
	}

	// Call a subroutine to connect to the new client. 

	Pipe[i].fPendingIO = ConnectToNewClient(
		Pipe[i].hPipeInst,
		&Pipe[i].oOverlap);

	Pipe[i].dwState = Pipe[i].fPendingIO ?
		CONNECTING_STATE : // still connecting 
		READING_STATE;     // ready to read 
}

BOOL ConnectToNewClient(HANDLE hPipe, LPOVERLAPPED lpo)
{
	BOOL fConnected, fPendingIO = FALSE;

	// Start an overlapped connection for this pipe instance. 
	fConnected = ConnectNamedPipe(hPipe, lpo);

	// Overlapped ConnectNamedPipe should return zero. 
	if (fConnected)
	{
		printf("ConnectNamedPipe failed with %d.\n", GetLastError());
		return 0;
	}

	switch (GetLastError())
	{
		// The overlapped connection in progress. 
	case ERROR_IO_PENDING:
		fPendingIO = TRUE;
		break;

		// Client is already connected, so signal an event. 

	case ERROR_PIPE_CONNECTED:
		if (SetEvent(lpo->hEvent))
			break;

		// If an error occurs during the connect operation... 
	default:
	{
		printf("ConnectNamedPipe failed with %d.\n", GetLastError());
		return 0;
	}
	}

	return fPendingIO;
}

void GetAnswerToRequest(LPPIPEINST pipe)
{
	//if shell not activated, print like a normal pipe
	if (signal != 2) {
		printf("Message from client:\n");
		_tprintf(TEXT("[%d] %s\n"), pipe->hPipeInst, pipe->chRequest);
	}
	StringCchCopy(pipe->chReply, BUFSIZE, TEXT("Bye bye from Server!"));

	//if shell not activiated and user calls exec, signal ghEvents[2] to start shell
	if (signal != 2 && !_tcscmp(pipe->chRequest, _T("exec"))) {
		printf("exec is called\n");
		if (!SetEvent(ghEvents[2])) {
			printf("SetEvent failed (%d)\n", GetLastError());
			return;
		}
		else {
			printf("Exec Event started\n");
			return;
		}
	}

	//if shell is activated 
	if (signal == 2) {
		//get user commands from namedpipe
		size_t   i;
		char *charBuffer = (char *)malloc(256);
		wchar_t *wcharBuffer = pipe->chRequest;
		wcstombs_s(&i, charBuffer, (size_t)256,
			wcharBuffer, (size_t)256);


		//append enter and new line to the command
		const char c_szText2[256] = "\r\n";

		strcpy_s(commandBuf, charBuffer);
		strcat_s(commandBuf, c_szText2);
		printf("%s", commandBuf);
	}
	pipe->cbToWrite = (lstrlen(pipe->chReply) + 1) * sizeof(TCHAR);
	
}

void CreateChildProcess()
// Create a child process that uses the previously created pipes for STDIN and STDOUT.
{
	SECURITY_ATTRIBUTES saAttr;

	printf("\n->Start of parent execution.\n");

	// Set the bInheritHandle flag so pipe handles are inherited. 

	saAttr.nLength = sizeof(SECURITY_ATTRIBUTES);
	saAttr.bInheritHandle = TRUE;
	saAttr.lpSecurityDescriptor = NULL;

	// Create a pipe for the child process's STDOUT. 

	if (!CreatePipe(&g_hChildStd_OUT_Rd, &g_hChildStd_OUT_Wr, &saAttr, 0))
		printf("StdoutRd CreatePipe");

	// Ensure the read handle to the pipe for STDOUT is not inherited.

	if (!SetHandleInformation(g_hChildStd_OUT_Rd, HANDLE_FLAG_INHERIT, 0))
		printf("Stdout SetHandleInformation");

	// Create a pipe for the child process's STDIN. 

	if (!CreatePipe(&g_hChildStd_IN_Rd, &g_hChildStd_IN_Wr, &saAttr, 0))
		printf("Stdin CreatePipe");

	// Ensure the write handle to the pipe for STDIN is not inherited. 

	if (!SetHandleInformation(g_hChildStd_IN_Wr, HANDLE_FLAG_INHERIT, 0))
		printf("Stdin SetHandleInformation");

	TCHAR szCmdline[] = TEXT("child");
	PROCESS_INFORMATION piProcInfo;
	STARTUPINFO siStartInfo;
	BOOL bSuccess = FALSE;

	// Set up members of the PROCESS_INFORMATION structure. 

	ZeroMemory(&piProcInfo, sizeof(PROCESS_INFORMATION));

	// Set up members of the STARTUPINFO structure. 
	// This structure specifies the STDIN and STDOUT handles for redirection.

	ZeroMemory(&siStartInfo, sizeof(STARTUPINFO));
	siStartInfo.cb = sizeof(STARTUPINFO);
	siStartInfo.hStdError = g_hChildStd_OUT_Wr;
	siStartInfo.hStdOutput = g_hChildStd_OUT_Wr;
	siStartInfo.hStdInput = g_hChildStd_IN_Rd;
	siStartInfo.dwFlags |= STARTF_USESTDHANDLES;

	// Create the child process. 
	
	DWORD i;

	DWORD  bufCharCount = INFO_BUFFER_SIZE;
	bufCharCount = ExpandEnvironmentStrings(TEXT("%SYSTEMROOT%\\system32\\cmd.exe"), cmdPath,
		INFO_BUFFER_SIZE);

	bSuccess = CreateProcess(
		cmdPath,
		NULL,     // command line 
		NULL,          // process security attributes 
		NULL,          // primary thread security attributes 
		TRUE,          // handles are inherited 
		0,             // creation flags 
		NULL,          // use parent's environment 
		NULL,          // use parent's current directory 
		&siStartInfo,  // STARTUPINFO pointer 
		&piProcInfo);  // receives PROCESS_INFORMATION 

	 // If an error occurs, exit the application. 
	if (!bSuccess)
		printf("CreateProcess failed");
	else
	{
		// Close handles to the child process and its primary thread.
		// Some applications might keep these handles to monitor the status
		// of the child process, for example. 

		CloseHandle(piProcInfo.hProcess);
		CloseHandle(piProcInfo.hThread);

		// Close handles to the stdin and stdout pipes no longer needed by the child process.
		// If they are not explicitly closed, there is no way to recognize that the child process has ended.

		CloseHandle(g_hChildStd_OUT_Wr);
		g_hChildStd_OUT_Wr = 0;
		CloseHandle(g_hChildStd_IN_Rd);
		g_hChildStd_IN_Rd = 0;
	}
	

}

void WriteToPipe(void)
// Read from named pipe and write its contents to the pipe for the child's STDIN.
// Stop when there is no more data. 
{
	//commandBuf is named pipe client user input, write into childprocess 
	DWORD dwBytesToWrite = (DWORD)strlen(commandBuf);
	DWORD dwBytesWritten = 0;
	BOOL bSuccess = FALSE;
	bSuccess = WriteFile(g_hChildStd_IN_Wr, commandBuf, dwBytesToWrite, &dwBytesWritten, NULL);
	if (FALSE == bSuccess) {
		printf("Cmd killed\n");
		printf("Press enter to terminate process \n");
	}
	else{
		//printf("WriteToPipe success\n");
	}

	return;

	// Close the pipe handle so the child process stops reading. 

}


void ReadFromPipe(void)
// Read output from the child process's pipe for STDOUT
// and write to the parent process's pipe for STDOUT. 
// Stop when there is no more data. 
{
	DWORD dwRead; 
	DWORD dwWritten;
	CHAR chBuf[BUFSIZE];
	bzero(chBuf, sizeof(chBuf));
	BOOL bSuccess = FALSE;
	HANDLE hParentStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	char DataBuffer[] = "\0";
	DWORD dwBytesToWrite = (DWORD)strlen(DataBuffer);
	DWORD dwBytesWritten = 0;
	BOOL bErrorFlag = FALSE;

	Sleep(2000); //delay for command to finish executing

	//append EOF char to child stdout so parent process knows when to stop
	bErrorFlag = WriteFile(
		g_hChildStd_OUT_Rd,           // open file handle
		DataBuffer,      // start of data to write
		dwBytesToWrite,  // number of bytes to write
		&dwBytesWritten, // number of bytes that were written
		NULL);            // no overlapped structure

	//read child stdout
	bSuccess = ReadFile(g_hChildStd_OUT_Rd, chBuf, BUFSIZE, &dwRead, NULL);

	if (!bSuccess || dwRead == 0) {
		return;
	}

	//writes child output to parent
	bSuccess = WriteFile(hParentStdOut, chBuf,
		dwRead, &dwWritten, NULL);
	if (!bSuccess) {
		return;
		}

	return;
}


